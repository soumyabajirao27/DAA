#include <stdio.h>
int knapsack(int N, int W, int val[], int wt[]) {
	int dp[W + 1];
	for (int i = 0; i <= W; i++) {
		dp[i] = 0;
	}
	for (int i = 0; i < N; i++) {
		for (int j = W; j >= wt[i]; j--) {
			dp[j] = (dp[j] > dp[j - wt[i]] + val[i]) ? dp[j] : dp[j - wt[i]] + val[i];
		}
	}
	return dp[W];
}
int main() {
	int N, W;
	scanf("%d", &N);
	int val[N], wt[N];
	for (int i = 0; i < N; i++) {
		scanf("%d", &val[i]);
	}
	for (int i = 0; i < N; i++) {
		scanf("%d", &wt[i]);
	}
	scanf("%d", &W);
	int result = knapsack(N, W, val, wt);
	printf("%d\n", result);  // Output the maximum value that can be obtained
	return 0;
}
